#!/usr/bin/env python3

import argparse
import os.path
import subprocess
import sys

parser = argparse.ArgumentParser(description="Publish Docker images")
parser.add_argument(
    "--image", dest="images", action="append", help="The image to be exported"
)
parser.add_argument(
    "--no-login", dest="login", action="store_false", help="Do the Docker hub login"
)
parser.add_argument(
    "--no-trigger",
    dest="trigger",
    action="store_false",
    help="Trigger openshift for an image update",
)
parser.add_argument(
    "--prefix", default="", help="Image prefix for the destination repository",
)
args = parser.parse_args()

ref = os.environ["GITHUB_REF"].split("/")

if ref[1] != "heads":
    print("Not a branch")
    sys.exit(0)

VERSION = "/".join(ref[2:])

if VERSION not in os.environ.get("HELM_RELEASE_NAMES", "").split(","):
    print("Not a release branch")
    sys.exit(0)

env = {}
with open(".env") as f:
    for line in f:
        if line and line[0] != "#":
            try:
                index = line.index("=")
                env[line[:index].strip()] = line[index + 1 :].strip()
            except ValueError:
                # Ignore lines that don't have a '='
                pass

print("Deploying images for tag {}".format(VERSION))
sys.stdout.flush()
if args.login:
    subprocess.check_call(
        [
            "docker",
            "login",
            "--username="
            + subprocess.check_output(["gopass", "gs/ci/dockerhub/username"]).decode(),
            "--password="
            + subprocess.check_output(["gopass", "gs/ci/dockerhub/password"]).decode(),
        ]
    )

for image in args.images:
    FULL_IMAGE = "{}-{}".format(env.get("DOCKER_BASE", "camptocamp/geomapfish"), image)
    SRC_IMAGE = "{}:{}".format(FULL_IMAGE, env.get("DOCKER_TAG", "latest"))
    DEST_IMAGE = "{}{}:{}".format(args.prefix, FULL_IMAGE, VERSION)
    subprocess.check_call(["docker", "tag", SRC_IMAGE, DEST_IMAGE])
    subprocess.check_call(["docker", "push", DEST_IMAGE])

if args.trigger:
    OPENSHIFT_VERSION = "3.11.0"
    OPENSHIFT_HASH = "0cbc58b"
    OPENSHIFT_VERSION_NAME = "openshift-origin-client-tools-v{}-{}-linux-64bit".format(
        OPENSHIFT_VERSION, OPENSHIFT_HASH
    )
    OPENSHIFT_FILE = OPENSHIFT_VERSION_NAME + ".tar.gz"
    OPENSHIFT_URL = "https://github.com/openshift/origin/releases/download/v{}/{}".format(
        OPENSHIFT_VERSION, OPENSHIFT_FILE
    )
    subprocess.check_call(["wget", "--quiet", OPENSHIFT_URL], cwd="/tmp")
    subprocess.check_call(["tar", "xfz", OPENSHIFT_FILE], cwd="/tmp")
    OC = "/tmp/{}/oc".format(OPENSHIFT_VERSION_NAME)

    subprocess.check_call(
        [
            OC,
            "login",
            subprocess.check_output(
                [
                    "gopass",
                    "gs/ci/openshift/{}/url".format(os.environ["OPENSHIFT_PROJECT"]),
                ]
            ).decode(),
            "--token="
            + subprocess.check_output(
                [
                    "gopass",
                    "gs/ci/openshift/{}/token".format(os.environ["OPENSHIFT_PROJECT"]),
                ]
            ).decode(),
        ]
    )
    for image in args.images:
        OPENSHIFT_IMAGE_REF = "{version}-c2cgeoportal-{image}:{version}".format(
            version=VERSION, image=image
        )
        subprocess.check_call(
            [
                OC,
                "import-image",
                OPENSHIFT_IMAGE_REF,
                "--scheduled=true",
                "--reference-policy=local",
                "--namespace=" + os.environ["OPENSHIFT_PROJECT"],
            ]
        )
